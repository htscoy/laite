import{isRedirect as S,isNotFound as F}from"@tanstack/router-core";import b from"tiny-invariant";import{eventHandler as j,toWebRequest as N,getResponseStatus as I,getEvent as L}from"@tanstack/start-server-core";import{createMiddleware as C,registerGlobalMiddleware as O,startSerializer as u}from"@tanstack/start-client-core";const A={},J=C().client(async e=>{const t=new Date;return e.next({context:{clientTime:t},sendContext:{clientTime:t}})}).server(async e=>{const t=new Date;return e.next({sendContext:{serverTime:t,durationToServer:t.getTime()-e.context.clientTime.getTime()}})}),_=C().middleware([J]).client(async e=>{const t=await e.next(),r=new Date;return console.log("Client Req/Res:",{duration:t.context.clientTime.getTime()-r.getTime(),durationToServer:t.context.durationToServer,durationFromServer:r.getTime()-t.context.serverTime.getTime()}),t});O({middleware:[_]});const U=j($),p=A;async function $(e){const t=N(e);return await z({request:t,event:e})}function q(e){return e.replace(/^\/|\/$/g,"")}async function z({request:e,event:t}){const r=new AbortController,i=r.signal,v=()=>r.abort();t.node.req.on("close",v);const g=e.method,y=new URL(e.url,"http://localhost:3000"),M=new RegExp(`${q("/_server")}/([^/?#]+)`),h=y.pathname.match(M),s=h?h[1]:null,c=Object.fromEntries(y.searchParams.entries()),w="createServerFn"in c,E="raw"in c;if(typeof s!="string")throw new Error("Invalid server action param for serverFnId: "+s);const m=p[s];if(!m)throw console.log("serverFnManifest",p),new Error("Server function info not found for "+s);let l;if(l=await m.importer(),!l)throw console.log("serverFnManifest",p),new Error("Server function module not resolved for "+s);const a=l[m.functionName];if(!a)throw console.log("serverFnManifest",p),console.log("fnModule",l),new Error(`Server function module export not resolved for serverFn ID: ${s}`);const D=["multipart/form-data","application/x-www-form-urlencoded"],d=await(async()=>{try{let n=await(async()=>{if(e.headers.get("Content-Type")&&D.some(o=>{var x;return(x=e.headers.get("Content-Type"))==null?void 0:x.includes(o)}))return b(g.toLowerCase()!=="get","GET requests with FormData payloads are not supported"),await a(await e.formData(),i);if(g.toLowerCase()==="get"){let o=c;return w&&(o=c.payload),o=o&&u.parse(o),await a(o,i)}const f=await e.text(),T=u.parse(f);return w?await a(T,i):await a(...T,i)})();return n.result instanceof Response?n.result:!w&&(n=n.result,n instanceof Response)?n:S(n)||F(n)?R(n):new Response(n!==void 0?u.stringify(n):void 0,{status:I(L()),headers:{"Content-Type":"application/json"}})}catch(n){return n instanceof Response?n:S(n)||F(n)?R(n):(console.info(),console.info("Server Fn Error!"),console.info(),console.error(n),console.info(),new Response(u.stringify(n),{status:500,headers:{"Content-Type":"application/json"}}))}})();if(t.node.req.removeListener("close",v),E)return d;if(d.headers.get("Content-Type")==="application/json"){const f=await d.clone().text();f&&JSON.stringify(JSON.parse(f))}return d}function R(e){const{headers:t,...r}=e;return new Response(JSON.stringify(r),{status:200,headers:{"Content-Type":"application/json",...t||{}}})}export{U as default};
